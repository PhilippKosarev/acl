#! /usr/bin/python

# Imports
import sys, os, platform
from libjam import Captain, Drawer, Typewriter, Notebook, Flashcard
from ac_launcher import ACLauncher

# Jam objects
captain = Captain()
drawer = Drawer()
typewriter = Typewriter()
notebook = Notebook()
flashcard = Flashcard()

# Handling config
HOME = drawer.get_home()
script_folder = os.path.dirname(os.path.realpath(__file__))
CONFIG_TEMPLATE_FILE = f"{script_folder}/config.toml.in"
CONFIG_DIR = f"{HOME}/.config/acl"
CONFIG_FILE = f"{CONFIG_DIR}/config.toml"
notebook.check_config(CONFIG_TEMPLATE_FILE, CONFIG_FILE)
config = notebook.read_toml(CONFIG_FILE)

# Finding AC_DIR
AC_DIR = config.get('paths').get("AC_DIR")
ac_path_suffix = "steamapps/common/assettocorsa"
likely_ac_dirs = [f"{HOME}/.local/share/Steam/{ac_path_suffix}",
f"{HOME}/.var/app/com.valvesoftware.Steam/data/Steam/{ac_path_suffix}",
f"C:/Program Files (x86)/Steam/{ac_path_suffix}"]
if AC_DIR == None:
  for directory in likely_ac_dirs:
    if drawer.is_folder(directory):
      AC_DIR = directory
# Checking AC_DIR
if AC_DIR == None:
  print(f"Assetto Corsa folder not found.\n\
If Assetto Corsa is not installed in the default location, you might need to specify the path to '{assettocorsa}' in '{CONFIG_FILE}'.")
  sys.exit(-1)
if drawer.is_folder(AC_DIR) is False:
  print(f"Path to Assetto Corsa's folder specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)
if AC_DIR.endswith(ac_path_suffix) is False:
  print(f'''Path to Assetto Corsa in '{CONFIG_FILE}' is incorrect. It should end with '{assettocorsa}'.)
Currently specified AC directory:\n{AC_DIR}''')
  sys.exit(-1)
config['paths']['AC_DIR'] = AC_DIR

# Setting variables depending on OS
STEAM_EXEC = config.get('paths').get('STEAM_EXEC')
if STEAM_EXEC == None:
  OS = platform.system()
  if OS == 'Linux':
    if drawer.is_file('/bin/steam'):
      STEAM_EXEC = '/bin/steam'
    elif drawer.is_folder(f"{HOME}/.var/app/com.valvesoftware.Steam"):
      STEAM_EXEC = 'flatpak run com.valvesoftware.Steam'
  elif OS == 'Windows':
    if drawer.is_file('C:/Program Files (x86)/Steam/steam.exe'):
      STEAM_EXEC = 'C:/Program Files (x86)/Steam/steam.exe'
  else:
    print(f"{OS} is not currently supported.")
  if STEAM_EXEC == None:
    print()
# Checking STEAM_EXEC
if STEAM_EXEC == None:
  print(f"Steam executable file not found.\n\
If Steam is not installed in the default location, you might need to specify the path to the Steam executable in '{CONFIG_FILE}'.")
  sys.exit(-1)
elif drawer.is_file(STEAM_EXEC) is False:
  print(f"Path to Steam's executable specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)
config['paths']['STEAM_EXEC'] = STEAM_EXEC

# The command line interface functions
class CLI:
  # Interface to list installed mods
  def steam(self):
    def print_ac_launched():
      typewriter.print_status('Assetto Corsa was launched.')
    def print_ac_closed():
      typewriter.print('Assetto Corsa was stopped.')

    typewriter.print_status('Starting Assetto Corsa...')
    exit_code = ac_launcher.launch_ac_via_steam(
      launched_notification_func=print_ac_launched,
      closed_notification_func=print_ac_closed,
    )
    if exit_code == 1:
      typewriter.print('Steam is not running.')
    elif exit_code == 2:
      typewriter.print("Assetto Corsa's executable files weren't successfully renamed, likely due to filenames being messsed up.")
      if flashcard.yn_prompt("Ask Steam to valiadate Assetto Corsa's files?"):
        typewriter.print("Validating Assetto Corsa's files.")
        exit_code = ac_launcher.validate_ac_files()
        if exit_code == 1:
          typewriter.print('Steam is not running.')
    elif exit_code == 3:
      print('Assetto Corsa is already running.')
      if flashcard.yn_prompt("Stop Assetto Corsa?"):
        ac_launcher.kill_ac()
        print('Assetto Corsa was stopped.')

cli = CLI()

# Inputs/Commands/Options configuration
app = "acl"
description = "Assetto Corsa Launcher can launch Assetto Corsa without the use of the original launcher"
# help = "" # If you wish to set your own help page text
commands = {
  'steam-launch':     {'function': cli.steam,
  'description': 'Starts Assetto Corsa using Steam'},
}
options = {
 'original': {'long': ['original'], 'short': ['o'],
 'description': 'Starts the original Assetto Corsa launcher'},
}

# Getting program arguments
arguments = sys.argv
arguments.remove(arguments[0])
help = captain.generate_help(app, description, commands, options)
interpretation = captain.interpret(app, help, commands, arguments, options)
function = interpretation.get('function')
options = interpretation.get('options')
ac_launcher = ACLauncher(config, options)
# Executing function
exec(f"cli.{function}")
