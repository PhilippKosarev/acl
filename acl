#! /usr/bin/python

# Imports
import sys, os, platform

# Jamlauncher
from libjam import Captain, Drawer, Typewriter, Notebook, Flashcard
captain = Captain()
drawer = Drawer()
typewriter = Typewriter()
notebook = Notebook()
flashcard = Flashcard()


# Getting configuration
HOME = drawer.get_home()
script_folder = os.path.dirname(os.path.realpath(__file__))
CONFIG_TEMPLATE_FILE = f"{script_folder}/config.toml.in"
CONFIG_DIR = f"{HOME}/.config/acl"
CONFIG_FILE = f"{CONFIG_DIR}/config.toml"
notebook.check_config(CONFIG_TEMPLATE_FILE, CONFIG_FILE)
config = notebook.read_toml(CONFIG_FILE)

# Initialising data
from data import Data
data = Data()

# Getting AC_DIR
AC_DIR = config.get('paths').get("AC_DIR")
if AC_DIR is None:
  AC_DIR = data.get_ac_dir()
  if AC_DIR is None:
    print(f"""Assetto Corsa folder not found.
If Assetto Corsa is not installed in the default location, please specify the path to '/steamapps/common/assettocorsa' in '{CONFIG_FILE}'.""")
    sys.exit(-1)
elif drawer.is_folder(AC_DIR) is False:
  print(f"Path to Assetto Corsa's folder specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)

# Getting STEAM_EXEC
STEAM_EXEC = config.get('paths').get('STEAM_EXEC')
if STEAM_EXEC is None:
  STEAM_EXEC = data.get_steam_exec()
  if STEAM_EXEC is None:
    print(f"""Steam executable file not found.\n\
If Steam is not installed in the default location, please specify the path to the Steam executable in '{CONFIG_FILE}'.""")
    sys.exit(-1)
elif drawer.is_file(STEAM_EXEC) is False:
  print(f"Path to Steam executable specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)

# Initialising ac launcher
from launcher import Launcher
launcher = Launcher(AC_DIR, STEAM_EXEC)

# The command line interface
class CLI:
  # Interface to list installed mods
  def steam_launch(self):
    # Defining how to handle events
    def print_ac_launched():
      typewriter.print_status('Assetto Corsa was launched.')
    def print_ac_closed():
      typewriter.print('Assetto Corsa was stopped.')
    def steam_not_running():
      typewriter.print('Steam is not running.')
      return
    def rename_error():
      typewriter.print("Assetto Corsa's executable files weren't successfully renamed, likely due to filenames being messsed up.")
      if flashcard.yn_prompt("Ask Steam to validate Assetto Corsa's files?"):
        launcher.validate_ac_files(steam_not_running)
        typewriter.print("Validating Assetto Corsa's files.")
        return
    def already_running():
      print('Assetto Corsa is already running.')
      if flashcard.yn_prompt("Stop Assetto Corsa?"):
        launchercher.kill_ac()
        print('Assetto Corsa was stopped.')
    # Starting
    typewriter.print_status('Starting Assetto Corsa...')
    launcher.launch_ac_via_steam(
      print_ac_launched, print_ac_closed,
      steam_not_running, rename_error,
      already_running,
    )

cli = CLI()

# Inputs/Commands/Options configuration
app = "acl"
description = "Assetto Corsa Launcher can launch Assetto Corsa without the use of the original launcher"
# help = "" # If you wish to set your own help page text
commands = {
  'steam-launch':     {'function': cli.steam_launch,
  'description': 'Starts Assetto Corsa using Steam'},
}
options = {
 'original': {'long': ['original'], 'short': ['o'],
 'description': 'Starts the original Assetto Corsa launcher'},
}

# Getting program arguments
arguments = sys.argv
arguments.remove(arguments[0])
help = captain.generate_help(app, description, commands, options)
interpretation = captain.interpret(app, help, commands, arguments, options)
function = interpretation.get('function')
options = interpretation.get('options')
original_launcher = options.get('original').get('enabled')
launcher = Launcher(AC_DIR, STEAM_EXEC, original_launcher)
# Executing function
exec(f"cli.{function}")
